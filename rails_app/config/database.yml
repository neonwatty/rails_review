
test:
  adapter: postgresql
  encoding: unicode
  pool: 5
  timeout: 5000
  database: <%= ENV["APP_NAME_PRIVATE"] %>_test
  
development:
  adapter: postgresql
  encoding: unicode
  pool: 5
  timeout: 5000
  database: <%= ENV["APP_NAME_PRIVATE"] %>_development

production:
  adapter: postgresql
  encoding: unicode
  pool: 5
  url: <%= ENV["DATABASE_URL_PRODUCTION"] %>
  timeout: 5000
  prepared_statements: false  #  PG::DuplicatePstatement (ERROR:  prepared statement -->  one of the only ways I could get this to work - disable prepared statements
  statement_limit: 200 # another alternative provided by https://medium.com/@devinburnette/be-prepared-7768d1a111e1




  # The specified database role being used to connect to PostgreSQL.
  # To create additional roles in PostgreSQL see `$ createuser --help`.
  # When left blank, PostgreSQL will use the default role. This is
  # the same name as the operating system user running Rails.
  #username: app_1

  # The password associated with the PostgreSQL role (username).
  #password:

  # Connect on a TCP socket. Omitted by default since the client uses a
  # domain socket that doesn't need configuration. Windows does not have
  # domain sockets, so uncomment these lines.
  #host: localhost

  # The TCP port the server listens on. Defaults to 5432.
  # If your server runs on a different port number, change accordingly.
  #port: 5432

  # Schema search path. The server defaults to $user,public
  #schema_search_path: myapp,sharedapp,public

  # Minimum log levels, in increasing order:
  #   debug5, debug4, debug3, debug2, debug1,
  #   log, notice, warning, error, fatal, and panic
  # Defaults to warning.
  #min_messages: notice



# As with config/credentials.yml, you never want to store sensitive information,
# like your database password, in your source code. If your source code is
# ever seen by anyone, they now have access to your database.
#
# Instead, provide the password or a full connection URL as an environment
# variable when you boot the app. For example:
#
#   DATABASE_URL="postgres://myuser:mypass@localhost/somedatabase"
#
# If the connection URL is provided in the special DATABASE_URL environment
# variable, Rails will automatically merge its configuration values on top of
# the values provided in this file. Alternatively, you can specify a connection
# URL environment variable explicitly:
#
#   production:
#     url: <%= ENV["MY_APP_DATABASE_URL"] %>
#
# Read https://guides.rubyonrails.org/configuring.html#configuring-a-database
# for a full overview on how database connection configuration can be specified.
#

# production:
#   adapter: postgresql
#   encoding: unicode
#   pool: 5
#   url: <%= ENV["DATABASE_URL_DEVELOPMENT"] %>
#   timeout: 5000
#   prepared_statements: false  #  PG::DuplicatePstatement (ERROR:  prepared statement -->  one of the only ways I could get this to work - disable prepared statements
#   statement_limit: 200 # another alternative provided by https://medium.com/@devinburnette/be-prepared-7768d1a111e1

